package org.firstinspires.ftc.teamcode;

import com.qualcomm.robotcore.eventloop.opmode.TeleOp;
import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;

import com.qualcomm.robotcore.hardware.DcMotorEx;

import org.gobilda.pinpoint.hardware.GoBildaPinpointDriver;
import org.gobilda.pinpoint.localization.Pose2d;

@TeleOp(name = "PinpointOdoDrive", group = "Test")
public class PinpointOdoDrive extends LinearOpMode {

    private GoBildaPinpointDriver pinpoint;

    private DcMotorEx frontLeft, frontRight, backLeft, backRight;

    @Override
    public void runOpMode() {

        // Initialize drive motors
        frontLeft  = hardwareMap.get(DcMotorEx.class, "frontLeft");
        frontRight = hardwareMap.get(DcMotorEx.class, "frontRight");
        backLeft   = hardwareMap.get(DcMotorEx.class, "backLeft");
        backRight  = hardwareMap.get(DcMotorEx.class, "backRight");

        frontLeft.setDirection(DcMotorEx.Direction.REVERSE);
        backLeft.setDirection(DcMotorEx.Direction.REVERSE);

        // Initialize Pinpoint Odometry
        pinpoint = hardwareMap.get(GoBildaPinpointDriver.class, "pinpoint");

        // Encoder pod configuration
        pinpoint.setEncoderResolution(GoBildaPinpointDriver.GoBildaOdometryPods.goBILDA_4_BAR_POD);
        pinpoint.setEncoderDirections(
                GoBildaPinpointDriver.EncoderDirection.REVERSED, // X encoder
                GoBildaPinpointDriver.EncoderDirection.FORWARD   // Y encoder
        );
        pinpoint.setOffsets(1526, 1464); // tenths of mm; adjust to your robot
        pinpoint.resetPoseEstimate();

        telemetry.addLine("Pinpoint + Drive Ready - Waiting for Start");
        telemetry.update();

        waitForStart();

        while (opModeIsActive()) {

            // --- Drive Control (Mecanum) ---
            double y = -gamepad1.left_stick_y;  // forward
            double x = gamepad1.left_stick_x;   // strafe
            double rx = gamepad1.right_stick_x; // rotation

            double denominator = Math.max(Math.abs(y) + Math.abs(x) + Math.abs(rx), 1);
            double fl = (y + x + rx) / denominator;
            double bl = (y - x + rx) / denominator;
            double fr = (y - x - rx) / denominator;
            double br = (y + x - rx) / denominator;

            frontLeft.setPower(fl);
            backLeft.setPower(bl);
            frontRight.setPower(fr);
            backRight.setPower(br);

            // --- Odometry Tracking ---
            Pose2d pose = pinpoint.getPose();

            telemetry.addData("X (in)", pose.getX());
            telemetry.addData("Y (in)", pose.getY());
            telemetry.addData("Heading (deg)", Math.toDegrees(pose.getHeading()));
            telemetry.update();
        }
    }
}
